% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpFFS.R
\name{mlr_pipeops_ffs}
\alias{mlr_pipeops_ffs}
\alias{PipeOpFFS}
\title{(F)unctional (F)eature (S)imple}
\format{
\code{\link{R6Class}} object inheriting from
\code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}
}
\description{
This is the class that extracts simple features from functional columns.
}
\section{Parameters}{

\itemize{
\item \code{drop} :: \code{logical(1)}\cr
Whether to drop the original \code{functional} features and only keep the extracted features.
Note that this does not remove the features from the backend, but only from the active
column role \code{feature}.
\item \code{affect_columns} :: \code{function} | \code{\link{Selector}} | \code{NULL} \cr
What columns the \code{\link{PipeOpTaskPreproc}} should operate on. This parameter
is only present if the constructor is called with the \code{can_subset_cols}
argument set to \code{TRUE} (the default).\cr The parameter must be a
\code{\link{Selector}} function, which takes a \code{\link[mlr3:Task]{Task}} as argument and
returns a \code{character}
of features to use.\cr
See \code{\link{Selector}} for example functions. Defaults to \code{NULL}, which selects all features.
\item \code{window} :: \code{integer()} | named \code{list()} | \verb{NULL \\cr The window size. When passing a named list, different window sizes can be specified for each feature by using it's name. If left }NULL\verb{, the window size is set to Inf. The window specifies the d such that all values within $[x - w, x]$ are used to compute the simple feature. Here $x$ is the rightmost (or leftmost, if }left == TRUE`) argument for
which the function was observed.
\item \code{feature} :: \code{character()} \cr
One of \code{"mean"}, \code{"max"},\code{"min"},\code{"slope"},\code{"median"}.
The feature that is extracted.
\item \code{left} :: \code{logical()} \cr
Whether to construct the window on the "left" (TRUE) or the "right" (FALSE) side.
}
}

\section{Methods}{

Only methods inherited from \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}/
\code{\link[mlr3pipelines:PipeOp]{PipeOp}}
}

\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpTaskPreproc]{mlr3pipelines::PipeOpTaskPreproc}} -> \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{mlr3pipelines::PipeOpTaskPreprocSimple}} -> \code{PipeOpFFS}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpFFS-new}{\code{PipeOpFFS$new()}}
\item \href{#method-PipeOpFFS-clone}{\code{PipeOpFFS$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFFS-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFFS-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new instance of this Class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFFS$new(id = "ffe", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{()\code{character(1)})\cr
Identifier of resulting object, default \code{"ffe"}.}

\item{\code{param_vals}}{(named \code{list})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFFS-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFFS-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFFS$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
