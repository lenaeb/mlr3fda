% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpFFE.R, R/PipeOpFMean.R
\name{mlr_pipeops_ffe}
\alias{mlr_pipeops_ffe}
\alias{PipeOpFFE}
\alias{PipeOpFMean}
\title{(F)unctional (F)eature (E)xtractor}
\format{
\code{\link{R6Class}} object inheriting from
\code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}

\code{\link{R6Class}} object inheriting from
\code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}

\code{\link{R6Class}} object inheriting from
\code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}
}
\description{
One can think of this PipeOp as applying the rolling mean for a given window size - specified in
terms of area on the x-axis, not number of observations - and appending the last mean as a
feature to the Task
}
\section{Parameters}{

\itemize{
\item \code{drop} :: \code{logical(1)}\cr
Whether to drop the original \code{functional} features and only keep the extracted features.
Note that this does not remove the features from the backend, but only from the active
column role \code{feature}.
\item \code{affect_columns} :: \code{function} | \code{\link{Selector}} | \code{NULL} \cr
What columns the \code{\link{PipeOpTaskPreproc}} should operate on. This parameter
is only present if the constructor is called with the \code{can_subset_cols}
argument set to \code{TRUE} (the default).\cr The parameter must be a
\code{\link{Selector}} function, which takes a \code{\link[mlr3:Task]{Task}} as argument and
returns a \code{character}
of features to use.\cr
See \code{\link{Selector}} for example functions. Defaults to \code{NULL}, which selects all features.
}


\itemize{
\item \code{extractors} :: \code{list(x1 = fn1, x2 = fn2, ...)}\cr
Named list of functions, that extract the features. The names are the suffixes that are
appended to the original column names, and the values are the feature extractors and must
return a list with values (i.e. the features). If there is more than one features, the
corresponding number is additionally suffixed to the name of the extracted feature.
\item \code{drop} :: \code{logical(1)}\cr
Whether to drop the original \code{functional} features and only keep the extracted features.
Note that this does not remove the features from the backend, but only from the active
column role \code{feature}.
}


\itemize{
\item \code{drop} :: \code{logical(1)}\cr
Whether to drop the original \code{functional} features and only keep the extracted features.
Note that this does not remove the features from the backend, but only from the active
column role \code{feature}.
\item \code{affect_columns} :: \code{function} | \code{\link{Selector}} | \code{NULL} \cr
What columns the \code{\link{PipeOpTaskPreproc}} should operate on. This parameter
is only present if the constructor is called with the \code{can_subset_cols}
argument set to \code{TRUE} (the default).\cr The parameter must be a
\code{\link{Selector}} function, which takes a \code{\link[mlr3:Task]{Task}} as argument and
returns a \code{character}
of features to use.\cr
See \code{\link{Selector}} for example functions. Defaults to \code{NULL}, which selects all features.
\item \code{window} :: \code{integer()} | named \code{list()} | \verb{NULL \\cr The window size. When passing a named list, different window sizes can be specified for each feature by using it's name. If left }NULL`, the window size is set to Inf.
}
}

\section{Methods}{

Only methods inherited from \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}/
\code{\link[mlr3pipelines:PipeOp]{PipeOp}}


Only methods inherited from \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}/
\code{\link[mlr3pipelines:PipeOp]{PipeOp}}


Only methods inherited from \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}/
\code{\link[mlr3pipelines:PipeOp]{PipeOp}}
}

\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpTaskPreproc]{mlr3pipelines::PipeOpTaskPreproc}} -> \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{mlr3pipelines::PipeOpTaskPreprocSimple}} -> \code{PipeOpFFE}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpFFE-new}{\code{PipeOpFFE$new()}}
\item \href{#method-PipeOpFFE-clone}{\code{PipeOpFFE$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFFE-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFFE-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new instance of this Class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFFE$new(id = "ffe", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{()\code{character(1)})\cr
Identifier of resulting object, default \code{"ffe"}.}

\item{\code{param_vals}}{(named \code{list})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would}

\item{\code{.extractors}}{(named \code{list()})\cr
Named list of functions, that extract the features. The names are the suffixes that are
appended to the original column names, and the values are the feature extractors and must
return a list with values (i.e. the features). If there is more than one features, the
corresponding number is additionally suffixed to the name of the extracted feature.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFFE-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFFE-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFFE$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpTaskPreproc]{mlr3pipelines::PipeOpTaskPreproc}} -> \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{mlr3pipelines::PipeOpTaskPreprocSimple}} -> \code{PipeOpFFE}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpFFE-new}{\code{PipeOpFFE$new()}}
\item \href{#method-PipeOpFFE-clone}{\code{PipeOpFFE$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFFE-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFFE-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new instance of this Class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFFE$new(id = "ffe", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{()\code{character(1)})\cr
Identifier of resulting object, default \code{"ffe"}.}

\item{\code{param_vals}}{(named \code{list})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would
otherwise be set during construction. Default \code{list()}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFFE-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFFE-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFFE$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpTaskPreproc]{mlr3pipelines::PipeOpTaskPreproc}} -> \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{mlr3pipelines::PipeOpTaskPreprocSimple}} -> \code{PipeOpFMean}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpFMean-new}{\code{PipeOpFMean$new()}}
\item \href{#method-PipeOpFMean-clone}{\code{PipeOpFMean$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFMean-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFMean-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new instance of this Class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFMean$new(id = "ffe", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{()\code{character(1)})\cr
Identifier of resulting object, default \code{"ffe"}.}

\item{\code{param_vals}}{(named \code{list})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFMean-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFMean-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFMean$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
